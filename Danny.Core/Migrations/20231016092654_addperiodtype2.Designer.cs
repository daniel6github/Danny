// <auto-generated />
using Danny.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Danny.Core.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231016092654_addperiodtype2")]
    partial class addperiodtype2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Danny.Core.Models.BondYield", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<double>("Yield")
                        .HasColumnType("double precision")
                        .HasColumnName("yield");

                    b.HasKey("Symbol", "Timestamp")
                        .HasName("pk_bond_yields");

                    b.ToTable("bond_yields", (string)null);
                });

            modelBuilder.Entity("Danny.Core.Models.Dividend", b =>
                {
                    b.Property<string>("StockCode")
                        .HasColumnType("text")
                        .HasColumnName("stock_code");

                    b.Property<long>("PayDate")
                        .HasColumnType("bigint")
                        .HasColumnName("pay_date");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("integer")
                        .HasColumnName("currency_code");

                    b.Property<long>("ExcludeRightDate")
                        .HasColumnType("bigint")
                        .HasColumnName("exclude_right_date");

                    b.HasKey("StockCode", "PayDate")
                        .HasName("pk_dividends");

                    b.ToTable("dividends", (string)null);
                });

            modelBuilder.Entity("Danny.Core.Models.Kline", b =>
                {
                    b.Property<string>("StockCode")
                        .HasColumnType("text")
                        .HasColumnName("stock_code");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer")
                        .HasColumnName("period_type");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<double>("Chg")
                        .HasColumnType("double precision")
                        .HasColumnName("chg");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision")
                        .HasColumnName("percent");

                    b.Property<double>("Turnoverrate")
                        .HasColumnType("double precision")
                        .HasColumnName("turnoverrate");

                    b.Property<long>("Volumn")
                        .HasColumnType("bigint")
                        .HasColumnName("volumn");

                    b.HasKey("StockCode", "Timestamp", "PeriodType")
                        .HasName("pk_klines");

                    b.ToTable("klines", (string)null);
                });

            modelBuilder.Entity("Danny.Core.Models.Stock", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid");

                    b.Property<int>("MarketCode")
                        .HasColumnType("integer")
                        .HasColumnName("market_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_stocks");

                    b.ToTable("stocks", (string)null);
                });

            modelBuilder.Entity("Danny.Core.Models.TradingData", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer")
                        .HasColumnName("period_type");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Symbol", "Timestamp", "PeriodType")
                        .HasName("pk_trading_data");

                    b.ToTable("trading_data", (string)null);
                });

            modelBuilder.Entity("Danny.Core.Models.Dividend", b =>
                {
                    b.HasOne("Danny.Core.Models.Stock", "Stock")
                        .WithMany("Dividends")
                        .HasForeignKey("StockCode")
                        .HasConstraintName("fk_dividends_stocks_stock_temp_id");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Danny.Core.Models.Kline", b =>
                {
                    b.HasOne("Danny.Core.Models.Stock", "Stock")
                        .WithMany("Klines")
                        .HasForeignKey("StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_klines_stocks_stock_temp_id1");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Danny.Core.Models.Stock", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("Klines");
                });
#pragma warning restore 612, 618
        }
    }
}
